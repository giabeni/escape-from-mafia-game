[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="OpenSimplexNoise" id=17]
period = 48.9

[sub_resource type="NoiseTexture" id=18]
seamless = true
noise = SubResource( 17 )

[sub_resource type="VisualShaderNodeTexture" id=19]
output_port_for_preview = 0
texture = SubResource( 18 )
texture_type = 2

[sub_resource type="NoiseTexture" id=20]
seamless = true
as_normalmap = true
bump_strength = 150.0
noise = SubResource( 17 )

[sub_resource type="VisualShaderNodeTexture" id=21]
output_port_for_preview = 0
texture = SubResource( 20 )
texture_type = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=22]
constant = 0.1

[sub_resource type="VisualShaderNodeIf" id=3]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.4, 2, 0.0, 3, Vector3( 0, 0, 0 ), 4, Vector3( 0, 0, 0 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
output_port_for_preview = 0
uniform_name = "ColorTexture"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.6 ]
operator = 2

[sub_resource type="VisualShader" id=14]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_11 : hint_normal;
uniform sampler2D ColorTexture : hint_black_albedo;
uniform sampler2D tex_frg_12 : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Texture:11
	vec4 tex_frg_11_read = texture(tex_frg_11, UV.xy);
	vec3 n_out11p0 = tex_frg_11_read.rgb;
	float n_out11p1 = tex_frg_11_read.a;

// If:4
	float n_in4p1 = 0.40000;
	float n_in4p2 = 0.00000;
	vec3 n_in4p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in4p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out4p0;
	if(abs(dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333)) - n_in4p1) < n_in4p2)
	{
		n_out4p0 = n_in4p3;
	}
	else if(dot(n_out11p0, vec3(0.333333, 0.333333, 0.333333)) < n_in4p1)
	{
		n_out4p0 = n_in4p5;
	}
	else
	{
		n_out4p0 = n_out11p0;
	}

// ScalarOp:6
	float n_in6p1 = 0.60000;
	float n_out6p0 = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)) * n_in6p1;

// TextureUniform:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 n_tex_read = texture(ColorTexture, vec3(n_out6p0).xy);
		n_out5p0 = n_tex_read.rgb;
		n_out5p1 = n_tex_read.a;
	}

// Scalar:13
	float n_out13p0 = 0.100000;

// Texture:12
	vec4 tex_frg_12_read = textureLod(tex_frg_12, UV.xy, n_out13p0);
	vec3 n_out12p0 = tex_frg_12_read.rgb;
	float n_out12p1 = tex_frg_12_read.a;

// Output:0
	ALBEDO = n_out5p0;
	ALPHA = n_out6p0;
	NORMALMAP = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 267.48, -18.26 )
nodes/vertex/0/position = Vector2( 1000, 140 )
nodes/fragment/0/position = Vector2( 1640, 80 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( 800, 160 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 1260, -140 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 1020, 180 )
nodes/fragment/11/node = SubResource( 19 )
nodes/fragment/11/position = Vector2( 380, 160 )
nodes/fragment/12/node = SubResource( 21 )
nodes/fragment/12/position = Vector2( 1000, 440 )
nodes/fragment/13/node = SubResource( 22 )
nodes/fragment/13/position = Vector2( 506.48, 588.24 )
nodes/fragment/connections = PoolIntArray( 4, 0, 6, 0, 5, 0, 0, 0, 11, 0, 4, 0, 11, 0, 4, 4, 6, 0, 5, 0, 6, 0, 0, 1, 13, 0, 12, 1, 12, 0, 0, 8 )

[sub_resource type="Gradient" id=15]
offsets = PoolRealArray( 0, 0.991935 )
colors = PoolColorArray( 0.00925064, 0.473633, 0.0818104, 1, 0.00639725, 0.125977, 0.0327888, 1 )

[sub_resource type="GradientTexture" id=16]
gradient = SubResource( 15 )
width = 16

[resource]
shader = SubResource( 14 )
shader_param/ColorTexture = SubResource( 16 )
